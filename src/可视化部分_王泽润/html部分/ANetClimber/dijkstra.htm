<HTML>
<HEAD>
<META charset = "utf_8" NAME="GENERATOR" Content="Microsoft Visual Studio">
<TITLE>dijkstra</TITLE>
    <script src="http://d3js.org/d3.v3.min.js"></script>   
</HEAD>
<BODY> 
    <style>
    .tooltip{
    font-family:simsun;
    font-size:16px;
    width:120;
    height:auto;
    position:absolute;
    text-align:center;
    border-style:solid;
    border-width:1px;
    background-color:white;
    border-radius:5px;
    }
    </style>
    <script language="javascript">
        var inf = 10000000.00;
        var totalnodenum;
        var distance = new Array();
        var graph = new Array();
       
        function Dijkstra(src, target, path,totalnodenum)
        {
            //console.log(src);
            //console.log(target);
            //console.log(totalnodenum);
            //console.log(graph);
            //起点与终点相同
            if (src == target)
            {
                return 0;
            }
            //var distance = new Array();
            var visited = new Array();
            //var path = new Array();
            //vector<double>distance(n); //距离
            //vector<bool>visited(n); //是否访问过
            //vector<vector<int>> path(n); //路径
            //初始化
            for (var i = 0; i < totalnodenum; i++)
            {
                distance[i] = inf;
                visited[i] = false;
            }
            //console.log(visited);
            //console.log(path);
            var current = -1;
            distance[src] = 0;
            var times = 0;
            while (times < totalnodenum)
            {
                times++;
                //找到距离最小的点current
                current = -1;
                for (var i = 0; i < totalnodenum; i++)
                {
                    if (visited[i] == true)
                        continue;
                    if (current == -1 || distance[i] < distance[current])
                    {  
                        current = i;
                    }
                }
                if (current == -1)
                    return 0;
                visited[current] = true;
                if (current != target)
                {
                    for (var i = 0; i < totalnodenum; i++)
                    {
                        //t是current到某点的距离
                        var t = distance[current] + graph[current][i];
                        if (t < distance[i])
                        {
                            distance[i] = t;
                            var k = 0;
                        //记录路径
                            while (path[current][k] != -1)
                            {
                                path[i][k] = path[current][k];
                                k++;
                            }
                            path[i][k] = current;
                        }
                    }
                }
            }
            //输出结果部分（可视化时可删去）
        if (distance[target] != inf)
        {
            return distance[target];
        }
        else
        {
            return inf;
        }
       }
        
        function DoDijkstra()
        {
            //console.log(inf);
            var src = document.getElementById("start").value;
            //console.log(src);
            var target = document.getElementById("end").value;
            var path = new Array();
            for (var i = 0; i < totalnodenum; i++) {
                path[i] = new Array();
            }
            for (var i = 0; i < totalnodenum; i++) {
                for (var j = 0; j < totalnodenum; j++) {
                    path[i][j] = -1;
                }
            }
            Dijkstra(src, target,path, totalnodenum);
            //console.log(distance[target]);
            for (var i = 0 ; i <= totalnodenum ; i++)
            {
                nodemap[i] = 0;
                prevnode[i] = -1;
            }            
            var putoutpath = document.getElementById("path");
            if(distance[target] != inf)
            {
                if (src == target) {
                    putoutpath.innerHTML = "好啊！居然用一样的点来骗我！";
                }
                else {
                    var prever = -1;
                    putoutpath.innerHTML = src + "到" + target + "的最短距离权重为" + distance[target] + "路径是：" + "\n";
                    for (var k = 0; path[target][k] != -1; k++) {
                        putoutpath.innerHTML += path[target][k];
                        putoutpath.innerHTML += "-";
                        nodemap[path[target][k]] = 1;
                        if (prever != -1)
                            prevnode[path[target][k]] = prever;
                        prever = path[target][k];
                    }
                    putoutpath.innerHTML += target;
                    prevnode[target] = prever;
                    nodemap[target] = 1;
                    nodemap[src] = 1;
                }
            }
            else {
                putoutpath.innerHTML = "没有找到喵~";
            }
            //console.log(prevnode);
        }
    </script>
    <div style="visibility:visible; left:100px; top:50px">
        <p>下边的图能看到最短路呢，如果没看到就温柔的点一下唤醒它吧~</p>
        <p>Enter sources:<input type="text" onkeypress="Givenpoint()" id="start" /></p>
        <p>Enter target:<input type="text" onkeypress="Givenpoint()" id="end" /></p>
        <input type="button" onclick="DoDijkstra()"value="得到最短路径" />
        <p id="path"></p>
    </div>
    <script>
        var nodes;
        var edges;
        var svg_edges;
        var svg_nodes

        var width = 600;
        var height = 600;
        var svg = d3.select("body")
        .append("svg")
        .attr("width", width)
        .attr("height", height);
        var tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0.0);
        
        d3.json("nodes.json", function(error,data) {
            //console.log(data);
            nodes = data.nodes;
            //console.log(nodes);
            totalnodenum = nodes.length;           
            var color = d3.scale.category20();
            svg_edges = svg.selectAll("line")
           .data(nodes)
           .enter()
           .append("line")
           .style("stroke", "#ccc")
           .style("stroke-width", 10)
                   //.attr("x1", 0)
                   //.attr("y1", 180)
                   //.attr("x2", function (d) {
                   //    return d.x;
                   //})
                   //.attr("y2", function (d) {
                   //    return d.y;
                   //})
           .style("opacity", 0.0);
            svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 5)
            .style("fill", function (d, i) { return color(i) });
           
        });

        //console.log("haha");
       
        //console.log(nodemap);
        //console.log(prevnode);
        d3.json("edges.json", function(error,data2) {
            edges = data2.edge;
            for (var k = 0 ; k < totalnodenum ; k++) {
                graph[k] = new Array();
            }
            for (var i = 0; i < totalnodenum; i++) {
                for (var j = 0; j < totalnodenum; j++) {
                    if (i == j)
                        graph[i][j] = 0;
                    else
                        graph[i][j] = inf;
                }
            }
            for (var k = 0 ; k < edges.length ; k++) {
                //console.log(k);                
                var src = edges[k].source;
                //console.log(src);
                var target = edges[k].target;
                //console.log(target);
                graph[src][target] = graph[target][src] = edges[k].w;
            }

            var force = d3.layout.force()
            .nodes(nodes)
            //.links(edges)
            .size([width, height])
            .linkDistance(200)
            .charge(-10);
            force.start();
            prevnode = new Array();
            nodemap = new Array();
            for (var i = 0 ; i <= totalnodenum; i++) {
                nodemap[i] = 1;
                prevnode[i] = -1;
            }
            svg_nodes.call(force.drag)
            .on("mouseover", function (d) {
                var text = d.name;
                if (nodemap[d.name] == 1) {
                    tooltip.html(text)
                                .style("left", (d3.event.pageX) + "px")
                                .style("top", (d3.event.pageY + 20) + "px")
                                .style("opacity", 1.0);
                }
            })
                .on("mouseout", function (d) {
                tooltip.style("opacity", 0.0);
            });
            force.on("tick", function () { //对于每一个时间间隔
                //更新连线坐标
                //svg_edges.attr("x1", function (d) { return d.source.x; })
                //    .attr("y1", function (d) { return d.source.y; })
                //    .attr("x2", function (d) { return d.target.x; })
                //    .attr("y2", function (d) { return d.target.y; });
                //更新节点坐标
                svg_nodes.attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });
                    //.attr("opacity", function (d) {  return nodemap[d.name] });
                svg_edges.attr("x2", function (d) {
                    return d.x;
                })
                    .attr("y2", function (d) {
                        return d.y;
                    })
                    .attr("x1", function (d) {
                        //console.log(prevnode);
                        if (prevnode[d.name] != -1) {
                            console.log(prevnode[d.name]);
                            console.log(nodes);
                            return nodes[prevnode[d.name]].x;
                        }
                    })
                    .attr("y1", function (d) {
                        if (prevnode[d.name] != -1) {
                            return nodes[prevnode[d.name]].y;
                        }
                    })
                     .style("opacity", function (d) {
                         if (nodemap[d.name] && prevnode[d.name] != -1) return 1;
                         return 0;
                     });
            });
        });
            
    </script>
</BODY>
</HTML>
