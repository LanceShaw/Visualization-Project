<HTML>
<HEAD>
    <META charset = "utf_8" NAME="GENERATOR" Content="Microsoft Visual Studio">
    <TITLE>link</TITLE>
    <script src="http://d3js.org/d3.v3.min.js"></script>
</HEAD>
<BODY>
    <style>
        .tooltip {
            font-family: simsun;
            font-size: 16px;
            width: 120;
            height: auto;
            position: absolute;
            text-align: center;
            border-style: solid;
            border-width: 1px;
            background-color: white;
            border-radius: 5px;
        }
    </style>
    <script language="javascript">

    </script>
    <div style="visibility:visible; left:100px; top:50px">
        <p>默认为阈值t=20连通分支，可以通过运行jsonmaker并输入新的阈值来重新制图</p>
    </div>
    <script>
        var width = 600;
        var height = 600;
        var nodes;
        var edges;
        var svg_nodes;
        var svg_edges;
        var totalnodenum;
        var deletenodes = new Array();
        var svg = d3.select("body")
        .append("svg")
        .attr("width", width)
        .attr("height", height);
        var tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0.0);

        d3.json("link.json", function (error, data2) {
            edges = data2.edges;
            var edgenum = edges.length;
            var linear = d3.scale.linear()
            .domain([0, 30])
            .range([0, 5]);
          
            for (var i = 0 ; i <= 971 ; i++) {
                deletenodes[i] = 0;
            }
            for (var i = 0 ; i < edgenum ; i++) {
                deletenodes[edges[i].source] = 1;
                deletenodes[edges[i].target] = 1;
            }
            console.log(deletenodes);
            svg_edges = svg.selectAll("line")
            .data(edges)
            .enter()
            .append("line")
            .style("stroke", "#ccc")
            .style("stroke-width", function (d,i) {return linear(d.w)});
        });

        d3.json("nodes.json", function (error, data) {
            nodes = data.nodes;
            totalnodenum = nodes.length;
          
            
            var color = d3.scale.category20();
            svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 5)
            .style("fill", function (d, i) { return color(i) });

            var force = d3.layout.force()
            .nodes(nodes)
            .links(edges)
            .size([width, height])
            .linkDistance(50)
            .charge(-10);
            force.start();

            svg_nodes.call(force.drag)
           .on("mouseover", function (d) {
               var text = d.name;
               tooltip.html(text)
               .style("left", (d3.event.pageX) + "px")
               .style("top", (d3.event.pageY + 20) + "px")
               .style("opacity", 1.0);
           })
               .on("mouseout", function (d) {
                   tooltip.style("opacity", 0.0);
               });

            force.on("tick", function () { //对于每一个时间间隔
                //更新连线坐标
                svg_edges.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });
                //更新节点坐标
                svg_nodes.attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; })
                    .attr("opacity", function (d) {  return deletenodes[d.name] });
            });
        });
    </script>

</BODY>
</HTML>
