<HTML>
<HEAD>
<META charset = "utf_8" NAME="GENERATOR" Content="Microsoft Visual Studio">
<TITLE>trees</TITLE>
    <script src="http://d3js.org/d3.v3.min.js"></script>   
</HEAD>
<BODY>
    <style>
        .tooltip {
            font-family: simsun;
            font-size: 16px;
            width: 120;
            height: auto;
            position: absolute;
            text-align: center;
            border-style: solid;
            border-width: 1px;
            background-color: white;
            border-radius: 5px;
        }
    </style>
    <script language="javascript">
            
    </script>
    <div style="visibility:visible; left:100px; top:50px">
        <p>最小生成树,通过读取nodes.json和trees.json绘制，两个json文件通过运行jsonmaker获取</p>
        <p>边粗细可以定性反映权重</p>
        <p>不能正常显示可以尝试刷新</p>
    </div>
    <script>
        var width = 600;
        var height = 600;
        var nodes;
        var edges;
        var svg_nodes;
        var svg_edges;
        var svg = d3.select("body")
        .append("svg")
        .attr("width", width)
        .attr("height", height);
        var tooltip = d3.select("body")
            .append("div")
            .attr("class", "tooltip")
            .style("opacity", 0.0);

        d3.json("trees.json", function (error, data2) {
            edges = data2.edges;            
           
            var linear = d3.scale.linear()
            .domain([1, 2])
            .range([1, 6]);

            svg_edges = svg.selectAll("line")
            .data(edges)
            .enter()
            .append("line")
            .style("stroke", "#ccc")
            .style("stroke-width", function (d,i) {return linear(d.w)});
        });

        d3.json("nodes.json", function (error, data) {
            nodes = data.nodes;
            totalnodenum = nodes.length;
            var color = d3.scale.category20();
            svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 5)
            .style("fill", function (d, i) { return color(i) });

            var force = d3.layout.force()
            .nodes(nodes)
            .links(edges)
            .size([width, height])
            .linkDistance(30)
            .charge(-8);
            force.start();

            svg_nodes.call(force.drag)
           .on("mouseover", function (d) {
               var text = d.name;
               tooltip.html(text)
               .style("left", (d3.event.pageX) + "px")
               .style("top", (d3.event.pageY + 20) + "px")
               .style("opacity", 1.0);
           })
               .on("mouseout", function (d) {
                   tooltip.style("opacity", 0.0);
               });



            force.on("tick", function () { //对于每一个时间间隔
                //更新连线坐标
                svg_edges.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });
                //更新节点坐标
                svg_nodes.attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });
            });
        });
    </script>

</BODY>
</HTML>
